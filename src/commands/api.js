// src/commands/api.js - Comando para verificar status da rota√ß√£o de API
import { SlashCommandBuilder } from 'discord.js';
import apiRotator from '../utils/apiRotator.js';

export default {
  data: new SlashCommandBuilder()
    .setName('api')
    .setDescription('Verifica o status da rota√ß√£o de modelos de API')
    .addSubcommand(subcommand =>
      subcommand
        .setName('status')
        .setDescription('Mostra estat√≠sticas dos modelos de API')
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('rotate')
        .setDescription('For√ßa rota√ß√£o para o pr√≥ximo modelo')
    )
    .addSubcommand(subcommand =>
      subcommand
        .setName('reset')
        .setDescription('Reseta todas as estat√≠sticas dos modelos')
    ),
  async execute(interaction) {
    const subcommand = interaction.options.getSubcommand();

    if (subcommand === 'status') {
      const stats = apiRotator.getStats();
      
      const embed = {
        title: 'üîÑ Status da Rota√ß√£o de API',
        color: 0x00ff00,
        fields: [
          {
            name: 'üìä Estat√≠sticas Gerais',
            value: `**Modelos Totais:** ${stats.totalModels}\n**Modelos Ativos:** ${stats.activeModels}\n**Requisi√ß√µes Totais:** ${stats.totalRequests}\n**Taxa de Sucesso:** ${stats.successRate}`,
            inline: false
          },
          {
            name: 'üìà Limites Di√°rios',
            value: `**Total Dispon√≠vel:** ${stats.totalDailyLimit}\n**Total Usado:** ${stats.totalUsed}\n**Restante:** ${stats.remainingRequests}`,
            inline: false
          },
          {
            name: 'ü§ñ Modelos Dispon√≠veis',
            value: stats.models.map(m => 
              `${m.isActive ? '‚úÖ' : '‚ùå'} **${m.name.split('/')[1]}**\n` +
              `   Uso: ${m.usage} ${m.isActive ? '' : '(Inativo)'}`
            ).join('\n\n'),
            inline: false
          }
        ],
        timestamp: new Date().toISOString(),
        footer: {
          text: 'Sistema de Rota√ß√£o de API Ativo'
        }
      };

      await interaction.reply({ embeds: [embed] });
    } else if (subcommand === 'rotate') {
      apiRotator.forceRotation();
      await interaction.reply('üîÑ Rota√ß√£o for√ßada para o pr√≥ximo modelo!');
    } else if (subcommand === 'reset') {
      apiRotator.clearStats();
      await interaction.reply('üßπ Todas as estat√≠sticas dos modelos foram resetadas!');
    }
  }
};
