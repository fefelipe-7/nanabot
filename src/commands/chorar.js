// src/commands/chorar.js - Comando unificado n!chorar
import { formatReply } from '../utils/formatReply.js';
import modeManager from '../modules/modeManager.js';
import emotionBase from '../modules/emotionBase.js';
import fs from 'fs';
import path from 'path';

export default {
  commandName: 'chorar',
  description: 'A Alice simula um choro dram√°tico infantil (mini-evento)',
  category: 'afeto',
  aliases: ['cry', 'buaaa'],
  
  async execute(message, client) {
    console.log(`[CHORAR-COMMAND] üò≠ Executando comando chorar para ${message.author.username}`);
    
    try {
      const guildId = message.guild?.id || 'dm';
      const channelId = message.channel.id;
      const userId = message.author.id;
      
      // Carrega configura√ß√£o
      const config = this.loadCommandConfig();
      
      // Verifica se j√° est√° chorando
      const existingMode = await modeManager.isInMode(guildId, channelId, userId, 'crying');
      
      if (existingMode.active) {
        console.log(`[CHORAR-COMMAND] üò≠ J√° est√° chorando, intensificando drama`);
        await this.intensifyCrying(message, config);
        return;
      }
      
      // Inicia modo de choro
      const modeConfig = config.mode || {};
      const ttl = modeConfig.ttl || 300; // 5 minutos
      
      const cryingReason = this.generateCryingReason(config);
      const stateData = {
        reason: cryingReason,
        intensity: 1,
        startTime: Date.now()
      };
      
      const modeStarted = await modeManager.startMode(guildId, channelId, userId, 'crying', stateData, ttl);
      
      if (!modeStarted) {
        console.log(`[CHORAR-COMMAND] ‚ùå Falha ao iniciar modo de choro`);
        await message.reply(formatReply('Buaaa... üò≠ *come√ßa a chorar*'));
        return;
      }
      
      // Gera resposta dram√°tica
      const cryingResponse = this.generateCryingResponse(cryingReason, config);
      
      // Aplica varia√ß√£o emocional
      const finalResponse = emotionBase.applyEmotionVariation(
        cryingResponse, 
        'low' // Intensidade baixa para choro
      );
      
      // Aplica nudge emocional
      emotionBase.applyEmotionalNudge('sadness', 1);
      
      await message.reply(formatReply(finalResponse));
      console.log(`[CHORAR-COMMAND] ‚úÖ Modo de choro iniciado (TTL: ${ttl}s)`);
      
    } catch (error) {
      console.error(`[CHORAR-COMMAND] üí• Erro:`, error.message);
      await message.reply(formatReply('Buaaa... üò≠ *come√ßa a chorar*'));
    }
  },

  // Carrega configura√ß√£o do comando
  loadCommandConfig() {
    try {
      const configPath = path.join(process.cwd(), 'src', 'config', 'commands.json');
      const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
      return config.commands.chorar || {};
    } catch (error) {
      console.error('[CHORAR-COMMAND] Erro ao carregar config:', error.message);
      return {};
    }
  },

  // Gera motivo do choro
  generateCryingReason(config) {
    const timeBasedReasons = this.getTimeBasedReasons();
    const emotionalReasons = this.getEmotionalReasons();
    const situationalReasons = this.getSituationalReasons();
    
    const allReasons = [
      ...timeBasedReasons,
      ...emotionalReasons, 
      ...situationalReasons,
      ...(config.mode?.reasons || [])
    ];
    
    return allReasons[Math.floor(Math.random() * allReasons.length)];
  },

  // Motivos baseados na hora do dia
  getTimeBasedReasons() {
    const hour = new Date().getHours();
    
    if (hour < 8) {
      return [
        "N√£o quero acordar ainda! *esfrega os olhos*",
        "Meu sonho estava t√£o bom e acabou!",
        "Est√° muito cedo para sair da caminha!"
      ];
    } else if (hour < 12) {
      return [
        "Meu caf√© da manh√£ acabou muito r√°pido!",
        "Queria brincar mais antes do almo√ßo!",
        "A manh√£ est√° passando muito devagar!"
      ];
    } else if (hour < 18) {
      return [
        "N√£o quero tirar soneca agora!",
        "Queria que a tarde durasse para sempre!",
        "Meu lanche favorito acabou!"
      ];
    } else {
      return [
        "N√£o quero que o dia acabe!",
        "Ainda n√£o estou com sono!",
        "Queria mais tempo para brincar!"
      ];
    }
  },

  // Motivos emocionais variados
  getEmotionalReasons() {
    return [
      "Estou com saudade de algu√©m especial!",
      "Meu cora√ß√£o est√° apertadinho!",
      "Queria um abra√ßo bem gostoso!",
      "Me sinto sozinha √†s vezes!",
      "Queria que todos fossem meus amigos!",
      "Meu sentimento est√° confuso!",
      "Preciso de carinho agora!",
      "Estou com o cora√ß√£o sens√≠vel hoje!"
    ];
  },

  // Motivos situacionais criativos
  getSituationalReasons() {
    return [
      "Meu biscoito caiu no ch√£o e ficou triste!",
      "Perdi meu brinquedo favorito no mundo das meias!",
      "Meu desenho n√£o ficou como eu imaginava!",
      "Quebrei minha caneca da Alice no Pa√≠s das Maravilhas!",
      "N√£o consigo fazer uma torre alta de blocos!",
      "Meu ursinho est√° com dor de barriga!",
      "A boneca n√£o quer pentear o cabelo!",
      "Meu castelo de areia desmoronou!",
      "A m√∫sica que eu gosto acabou!",
      "Minha hist√≥ria favorita terminou!",
      "O arco-√≠ris sumiu muito r√°pido!",
      "Minha flor murchou!",
      "O passarinho voou para longe!",
      "Minha bolha de sab√£o estourou!"
    ];
  },

  // Gera resposta do choro
  generateCryingResponse(reason, config) {
    const intensity = Math.random();
    let cryingPhrases;
    
    if (intensity < 0.3) {
      // Choro suave
      cryingPhrases = [
        `*snif snif* ${reason} ü•∫`,
        `*l√°grimas nos olhos* ${reason}...`,
        `*voz tremulinha* ${reason} üò¢`,
        `*suspira tristemente* ${reason}...`
      ];
    } else if (intensity < 0.7) {
      // Choro m√©dio
      cryingPhrases = [
        `Buaaa... ${reason} üò≠`,
        `üò≠ *solu√ßa* ${reason}`,
        `*come√ßa a chorar* ${reason} buaaa... üò≠`,
        `*choro de crian√ßa* ${reason} üò≠üò≠`
      ];
    } else {
      // Choro dram√°tico
      cryingPhrases = [
        `üò≠üò≠üò≠ BUAAAAA! ${reason} *choro dram√°tico*`,
        `*choro de novela* ${reason} BUAAA! üò≠üò≠üò≠`,
        `*drama total* ${reason} BUAAAAA! üò≠üò≠üò≠üò≠`,
        `*choro √©pico* BUAAA! ${reason} *l√°grimas de crocodilo* üò≠üò≠üò≠`
      ];
    }
    
    const phrase = cryingPhrases[Math.floor(Math.random() * cryingPhrases.length)];
    
    // Adiciona instru√ß√µes de consola√ß√£o variadas
    const consolationHints = [
      "\n\n*Se algu√©m me der um abra√ßo, eu paro de chorar...* ü§ó",
      "\n\n*Preciso de carinho para parar de chorar...* üíï",
      "\n\n*Um abra√ßo bem apertado me faria parar de chorar...* ü´Ç",
      "\n\n*Quem me consolar vai ganhar um sorriso...* üòä",
      "\n\n*Se algu√©m me fizer rir, eu paro na hora...* üòÑ",
      "\n\n*Um cafun√© resolveria tudo...* ü•∞"
    ];
    
    const hint = consolationHints[Math.floor(Math.random() * consolationHints.length)];
    
    return phrase + hint;
  },

  // Intensifica o choro se j√° estiver chorando
  async intensifyCrying(message, config) {
    const intensifiedPhrases = [
      "Buaaa... buaaa... üò≠üò≠üò≠ *chora mais forte*",
      "üò≠üò≠üò≠ *choro de novela* buaaa...",
      "*chora dramaticamente* buaaa... üò≠üò≠üò≠",
      "Buaaa... üò≠ *choro exagerado* buaaa... üò≠"
    ];
    
    const phrase = intensifiedPhrases[Math.floor(Math.random() * intensifiedPhrases.length)];
    
    // Aplica varia√ß√£o emocional
    const finalPhrase = emotionBase.applyEmotionVariation(phrase, 'low');
    
    await message.reply(formatReply(finalPhrase));
  }
};
