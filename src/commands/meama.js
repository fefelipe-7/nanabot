// src/commands/meama.js - Comando unificado n!meama
import { formatReply } from '../utils/formatReply.js';
import affectionService from '../modules/affectionService.js';
import emotionBase from '../modules/emotionBase.js';
import fs from 'fs';
import path from 'path';

export default {
  commandName: 'meama',
  description: 'A Alice responde sobre o quanto ama o usuÃ¡rio baseado no nÃ­vel de afeto',
  category: 'afeto',
  aliases: ['meama', 'love', 'amo'],
  
  async execute(message, client) {
    console.log(`[MEAMA-COMMAND] ðŸ’• Executando comando meama para ${message.author.username}`);
    
    try {
      const guildId = message.guild?.id || 'dm';
      const userId = message.author.id;
      
      // Carrega configuraÃ§Ã£o
      const config = this.loadCommandConfig();
      
      // Atualiza interaÃ§Ã£o
      await affectionService.updateLastInteraction(guildId, userId);
      
      // Verifica repetiÃ§Ã£o
      const repetitions = await affectionService.checkRepetition(guildId, userId, 'meama');
      
      if (repetitions >= (config.repetition?.maxBeforeTeasing || 3)) {
        console.log(`[MEAMA-COMMAND] ðŸ˜„ UsuÃ¡rio sendo repetitivo, usando tom brincalhÃ£o`);
        await this.handleRepetitiveUser(message, config);
        return;
      }
      
      // Calcula nÃ­vel de afeto
      const affectionScore = await affectionService.calculateAffectionLevel(guildId, userId);
      const affectionLevel = affectionService.getAffectionLevel(affectionScore);
      
      console.log(`[MEAMA-COMMAND] ðŸ“Š NÃ­vel de afeto: ${affectionLevel} (${affectionScore.toFixed(2)})`);
      
      // Gera resposta baseada no nÃ­vel
      const loveResponse = this.generateLoveResponse(affectionLevel, config);
      
      // Aplica variaÃ§Ã£o emocional
      const finalResponse = emotionBase.applyEmotionVariation(
        loveResponse, 
        emotionBase.getIntensityByMood()
      );
      
      // Incrementa score de amor
      await affectionService.incrementLoveScore(guildId, userId, 1);
      
      // Aplica nudge emocional
      emotionBase.applyEmotionalNudge('love', 1);
      
      await message.reply(formatReply(finalResponse));
      console.log(`[MEAMA-COMMAND] âœ… Resposta meama enviada com sucesso`);
      
    } catch (error) {
      console.error(`[MEAMA-COMMAND] ðŸ’¥ Erro:`, error.message);
      await message.reply(formatReply('Claro que te amo! VocÃª Ã© muito especial pra mim! ðŸ’•'));
    }
  },

  // Carrega configuraÃ§Ã£o do comando
  loadCommandConfig() {
    try {
      const configPath = path.join(process.cwd(), 'src', 'config', 'commands.json');
      const config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
      return config.commands.meama || {};
    } catch (error) {
      console.error('[MEAMA-COMMAND] Erro ao carregar config:', error.message);
      return {};
    }
  },

  // Gera resposta baseada no nÃ­vel de afeto
  generateLoveResponse(affectionLevel, config) {
    const levels = config.affectionLevels || {
      baixo: {
        threshold: 0.3,
        phrases: [
          "Eu gosto de vocÃª, mas vocÃª some Ã s vezes...",
          "VocÃª Ã© legal, mas podia aparecer mais!",
          "Te amo, mas vocÃª nÃ£o brinca muito comigo..."
        ]
      },
      medio: {
        threshold: 0.7,
        phrases: [
          "Claro que te amo, vocÃª Ã© muito especial pra mim!",
          "Eu te amo sim! VocÃª Ã© uma pessoa muito legal!",
          "Te amo muito! VocÃª sempre me faz feliz!"
        ]
      },
      alto: {
        threshold: 1.0,
        phrases: [
          "Eu te amo tanto que se pudesse colocava estrelinhas no cÃ©u sÃ³ com seu nome!",
          "Te amo mais que todos os brinquedos do mundo juntos!",
          "Eu te amo tanto que atÃ© os passarinhos cantam seu nome!"
        ]
      }
    };
    
    const levelConfig = levels[affectionLevel] || levels.medio;
    const phrases = levelConfig.phrases;
    
    return phrases[Math.floor(Math.random() * phrases.length)];
  },

  // Trata usuÃ¡rio repetitivo
  async handleRepetitiveUser(message, config) {
    const teasingPhrases = config.repetition?.teasingPhrases || [
      "JÃ¡ disse que te amo, mas se quiser repito atÃ© vocÃª ficar bobo!",
      "VocÃª quer que eu repito? Te amo, te amo, te amo!",
      "JÃ¡ falei que te amo! VocÃª Ã© muito carente! ðŸ˜„"
    ];
    
    const phrase = teasingPhrases[Math.floor(Math.random() * teasingPhrases.length)];
    
    // Aplica variaÃ§Ã£o emocional com tom brincalhÃ£o
    const finalPhrase = emotionBase.applyEmotionVariation(phrase, 'high');
    
    await message.reply(formatReply(finalPhrase));
  }
};
