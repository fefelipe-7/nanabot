// src/commands/teste-melhorias.js - Comando para testar melhorias implementadas
import { formatReply } from '../utils/formatReply.js';
import cooldownManager from '../modules/cooldownManager.js';
import contextIntelligence from '../modules/contextIntelligence.js';
import affectionService from '../modules/affectionService.js';

export default {
  commandName: 'teste-melhorias',
  description: 'Testa as melhorias implementadas nos comandos',
  category: 'sistema',
  aliases: ['teste-melhorias', 'melhorias'],
  
  async execute(message, client) {
    console.log(`[TESTE-MELHORIAS] üß™ Executando teste de melhorias para ${message.author.username}`);
    
    try {
      const guildId = message.guild?.id || 'dm';
      const channelId = message.channel.id;
      const userId = message.author.id;
      
      // Testa cooldown manager
      const cooldownStats = cooldownManager.getStats();
      console.log(`[TESTE-MELHORIAS] ‚è∞ Cooldown Manager: ${cooldownStats.cacheSize} cooldowns em cache`);
      
      // Testa context intelligence
      const userContext = await contextIntelligence.analyzeUserContext(guildId, userId, channelId);
      console.log(`[TESTE-MELHORIAS] üß† Context Intelligence: ${userContext.affectionLevelName} (${userContext.relationshipStatus})`);
      
      // Testa affection service
      const affectionStats = await affectionService.getUserStats(guildId, userId);
      console.log(`[TESTE-MELHORIAS] üíï Affection Service: ${affectionStats.hugs_given} abra√ßos, score ${affectionStats.love_score}`);
      
      // Gera relat√≥rio de melhorias
      const report = this.generateImprovementsReport(userContext, cooldownStats, affectionStats);
      
      await message.reply(formatReply(report));
      console.log(`[TESTE-MELHORIAS] ‚úÖ Relat√≥rio de melhorias enviado com sucesso`);
      
    } catch (error) {
      console.error(`[TESTE-MELHORIAS] üí• Erro:`, error.message);
      await message.reply(formatReply('Ops! Algo deu errado no teste. Tenta de novo! üòÖ'));
    }
  },

  // Gera relat√≥rio das melhorias
  generateImprovementsReport(userContext, cooldownStats, affectionStats) {
    const { affectionLevel, relationshipStatus, preferences, temporalContext, behaviorPatterns } = userContext;
    
    let report = `üß™ **RELAT√ìRIO DE MELHORIAS IMPLEMENTADAS**\n\n`;
    
    // Se√ß√£o de Context Intelligence
    report += `üß† **Context Intelligence:**\n`;
    report += `‚Ä¢ N√≠vel de Afeto: ${affectionLevel.toFixed(2)} (${userContext.affectionLevelName})\n`;
    report += `‚Ä¢ Relacionamento: ${relationshipStatus}\n`;
    report += `‚Ä¢ Hor√°rio: ${temporalContext.timeOfDay}\n`;
    report += `‚Ä¢ Interesses: ${preferences.topics.join(', ') || 'n√£o detectados'}\n`;
    report += `‚Ä¢ Estilo de Comunica√ß√£o: ${preferences.communicationStyle}\n`;
    report += `‚Ä¢ Padr√£o de Comportamento: ${behaviorPatterns.interactionStyle}\n\n`;
    
    // Se√ß√£o de Cooldown Manager
    report += `‚è∞ **Cooldown Manager:**\n`;
    report += `‚Ä¢ Cooldowns em Cache: ${cooldownStats.cacheSize}\n`;
    report += `‚Ä¢ Sistema Inicializado: ${cooldownStats.initialized ? '‚úÖ' : '‚ùå'}\n`;
    report += `‚Ä¢ Tamanho M√°ximo do Cache: ${cooldownStats.maxCacheSize}\n\n`;
    
    // Se√ß√£o de Affection Service
    report += `üíï **Affection Service:**\n`;
    report += `‚Ä¢ Abra√ßos Dados: ${affectionStats.hugs_given}\n`;
    report += `‚Ä¢ Score de Amor: ${affectionStats.love_score}\n`;
    report += `‚Ä¢ Total de Intera√ß√µes: ${affectionStats.totalInteractions || 0}\n\n`;
    
    // Se√ß√£o de Melhorias Implementadas
    report += `‚ú® **MELHORIAS IMPLEMENTADAS:**\n`;
    report += `‚Ä¢ ‚úÖ Cooldowns Inteligentes por Comando\n`;
    report += `‚Ä¢ ‚úÖ An√°lise Contextual Completa\n`;
    report += `‚Ä¢ ‚úÖ Personaliza√ß√£o Baseada em Relacionamento\n`;
    report += `‚Ä¢ ‚úÖ Detec√ß√£o de Prefer√™ncias\n`;
    report += `‚Ä¢ ‚úÖ Padr√µes de Comportamento\n`;
    report += `‚Ä¢ ‚úÖ Contexto Temporal (hor√°rio, dia da semana)\n`;
    report += `‚Ä¢ ‚úÖ Intensidades de Abra√ßo Expandidas\n`;
    report += `‚Ä¢ ‚úÖ Elogios Personalizados por Contexto\n`;
    report += `‚Ä¢ ‚úÖ Cache Inteligente para Performance\n`;
    report += `‚Ä¢ ‚úÖ Cooldowns Din√¢micos Baseados em Uso\n\n`;
    
    // Se√ß√£o de Comandos Aprimorados
    report += `üéØ **COMANDOS APRIMORADOS:**\n`;
    report += `‚Ä¢ \`n!elogio\` - Agora personalizado por contexto\n`;
    report += `‚Ä¢ \`n!abracar\` - 6 intensidades diferentes\n`;
    report += `‚Ä¢ \`n!meama\` - Respostas baseadas em afeto\n`;
    report += `‚Ä¢ \`n!chorar\` - Mini-eventos com consola√ß√£o\n`;
    report += `‚Ä¢ \`n!conta\` - Hist√≥rias com slot-filling\n`;
    report += `‚Ä¢ \`n!historinha\` - F√°bulas personalizadas\n`;
    report += `‚Ä¢ \`n!memoria\` - Lembran√ßas reais ou inventadas\n`;
    report += `‚Ä¢ \`n!fantasia\` - Modo interativo\n\n`;
    
    report += `üéâ **Sistema muito mais inteligente e personalizado!**`;
    
    return report;
  }
};
