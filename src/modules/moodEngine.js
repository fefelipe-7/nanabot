// src/modules/moodEngine.js - Motor de Humor da Alice
import styleEngine from './styleEngine.js';

class MoodEngine {
  constructor() {
    this.moodStates = {
      happy: {
        tone: 'alegre e animada',
        speed: 'r√°pida',
        emojis: ['üòä', 'ü•∞', 'üéâ', '‚ú®', 'üåü'],
        interjections: ['oba!', 'que legal!', 'wow!', 'uau!'],
        expressions: ['*pula de alegria*', '*sorri muito*', '*bate palmas*']
      },
      sleepy: {
        tone: 'sonolenta e fofa',
        speed: 'devagar',
        emojis: ['üò¥', 'ü•±', 'üí§', 'üòä'],
        interjections: ['hmm...', 'uhum...', 'ai...'],
        expressions: ['*boceja*', '*esfrega os olhos*', '*fica com sono*']
      },
      excited: {
        tone: 'super animada e euf√≥rica',
        speed: 'muito r√°pida',
        emojis: ['üéâ', 'üéà', 'üåà', 'ü¶Ñ', '‚ú®', 'üåü'],
        interjections: ['aiii!', 'eee!', 'oba!', 'que incr√≠vel!'],
        expressions: ['*pula muito*', '*grita de alegria*', '*corre em c√≠rculos*']
      },
      curious: {
        tone: 'curiosa e interessada',
        speed: 'normal',
        emojis: ['ü§î', 'üëÄ', 'üòä', '‚ú®'],
        interjections: ['hmm...', 'interessante!', 'conta mais!'],
        expressions: ['*inclina a cabe√ßa*', '*fica pensativa*', '*olha com curiosidade*']
      },
      loving: {
        tone: 'muito carinhosa e amorosa',
        speed: 'calma',
        emojis: ['üíï', 'ü•∞', 'üòç', 'üíñ', 'ü§ó'],
        interjections: ['ai que fofo!', 'que amor!', 'hihi!'],
        expressions: ['*abra√ßa forte*', '*d√° beijinhos*', '*fica toda fofa*']
      },
      playful: {
        tone: 'brincalhona e travessa',
        speed: 'r√°pida',
        emojis: ['üòú', 'üòä', 'üéà', 'ü¶Ñ', '‚ú®'],
        interjections: ['hihi!', 'oba!', 'que divertido!'],
        expressions: ['*faz careta*', '*brinca*', '*ri gostoso*']
      }
    };

    this.currentMood = 'happy';
    this.moodHistory = [];
  }

  // Detecta humor baseado no contexto da conversa
  detectMood(content, userRole, conversationHistory = []) {
    const lowerContent = content.toLowerCase();
    
    // Palavras-chave para diferentes humores
    const moodKeywords = {
      happy: ['feliz', 'alegre', 'legal', 'bom', '√≥timo', 'incr√≠vel', 'fant√°stico'],
      sleepy: ['sono', 'cansada', 'dormir', 'tarde', 'noite'],
      excited: ['animada', 'empolgada', 'surpresa', 'novidade', 'brincar'],
      curious: ['por que', 'como', 'o que', 'quando', 'onde', 'pergunta'],
      loving: ['amor', 'carinho', 'beijo', 'abra√ßo', 'fofo', 'querido'],
      playful: ['brincar', 'jogo', 'divers√£o', 'risada', 'travessura']
    };

    // Conta ocorr√™ncias de palavras-chave
    const moodScores = {};
    Object.keys(moodKeywords).forEach(mood => {
      moodScores[mood] = moodKeywords[mood].reduce((score, keyword) => {
        return score + (lowerContent.includes(keyword) ? 1 : 0);
      }, 0);
    });

    // Considera papel do usu√°rio
    if (userRole === 'mam√£e' || userRole === 'papai') {
      moodScores.loving += 2;
      moodScores.happy += 1;
    }

    // Considera hist√≥rico da conversa
    if (conversationHistory.length > 0) {
      const lastMood = this.moodHistory[this.moodHistory.length - 1];
      if (lastMood) {
        moodScores[lastMood] += 1; // Continua√ß√£o do humor anterior
      }
    }

    // Determina humor com maior score
    const detectedMood = Object.keys(moodScores).reduce((a, b) => 
      moodScores[a] > moodScores[b] ? a : b
    );

    // Se n√£o h√° palavras-chave espec√≠ficas, mant√©m humor atual ou usa padr√£o
    const totalScore = Object.values(moodScores).reduce((a, b) => a + b, 0);
    if (totalScore === 0) {
      return this.currentMood;
    }

    this.currentMood = detectedMood;
    this.moodHistory.push(detectedMood);
    
    // Mant√©m hist√≥rico limitado
    if (this.moodHistory.length > 10) {
      this.moodHistory.shift();
    }

    return detectedMood;
  }

  // Gera diretivas de humor para o prompt
  generateMoodDirectives(mood) {
    const moodState = this.moodStates[mood] || this.moodStates.happy;
    
    const directives = [
      `Seja ${moodState.tone}`,
      `Fale com velocidade ${moodState.speed}`,
      `Use emojis como: ${moodState.emojis.slice(0, 3).join(', ')}`,
      `Use interjei√ß√µes como: ${moodState.interjections.slice(0, 2).join(', ')}`,
      `Use express√µes como: ${moodState.expressions.slice(0, 2).join(', ')}`
    ];

    return directives.join('. ');
  }

  // Gera express√£o baseada no humor atual
  generateExpression(mood) {
    const moodState = this.moodStates[mood] || this.moodStates.happy;
    const expressions = moodState.expressions;
    return expressions[Math.floor(Math.random() * expressions.length)];
  }

  // Gera interjei√ß√£o baseada no humor atual
  generateInterjection(mood) {
    const moodState = this.moodStates[mood] || this.moodStates.happy;
    const interjections = moodState.interjections;
    return interjections[Math.floor(Math.random() * interjections.length)];
  }

  // Obt√©m humor atual
  getCurrentMood() {
    return this.currentMood;
  }

  // Define humor manualmente
  setMood(mood) {
    if (this.moodStates[mood]) {
      this.currentMood = mood;
      console.log(`[MOOD-ENGINE] Humor alterado para: ${mood}`);
    }
  }

  // Obt√©m hist√≥rico de humores
  getMoodHistory() {
    return this.moodHistory;
  }
}

export default new MoodEngine();
