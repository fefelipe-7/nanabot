// src/modules/storyTeller.js - Contador de HistÃ³rias
import emotionBase from './emotionBase.js';
import apiRotator from '../utils/apiRotator.js';
import fs from 'fs';
import path from 'path';

class StoryTeller {
  constructor() {
    this.config = this.loadConfig();
    this.templates = this.loadTemplates();
  }

  // Carrega configuraÃ§Ã£o dos comandos
  loadConfig() {
    try {
      const configPath = path.join(process.cwd(), 'src', 'config', 'commands.json');
      return JSON.parse(fs.readFileSync(configPath, 'utf8'));
    } catch (error) {
      console.error('[STORY-TELLER] Erro ao carregar config:', error.message);
      return { commands: {}, global: { fallbackToOffline: true } };
    }
  }

  // Carrega templates de histÃ³rias
  loadTemplates() {
    return {
      daily: [
        "Hoje eu vi um passarinho azul e achei que era um super-herÃ³i voando!",
        "Eu tentei comer biscoito escondida, mas o suco caiu no chÃ£o!",
        "Sonhei que vocÃª tava lÃ¡ na escola comigo e a gente brincava muito!",
        "Hoje aprendi uma mÃºsica nova e cantei pra todos os meus brinquedos!",
        "Vi uma borboleta colorida e corri atrÃ¡s dela pelo jardim!",
        "Tentei desenhar um gato, mas ficou parecendo um elefante!"
      ],
      fantasy: [
        "Era uma vez um dragÃ£o que tinha medo de voar...",
        "Tinha uma princesa que adorava brincar de esconde-esconde...",
        "Era uma vez um robÃ´ que queria aprender a danÃ§ar...",
        "Tinha uma fada que colecionava estrelas cadentes...",
        "Era uma vez um unicÃ³rnio que tinha alergia a arco-Ã­ris..."
      ],
      lessons: [
        "que a amizade Ã© a coisa mais importante do mundo!",
        "que sempre devemos ajudar quem precisa!",
        "que ser gentil faz todo mundo feliz!",
        "que nunca devemos desistir dos nossos sonhos!",
        "que cada um Ã© especial do seu jeito!",
        "que o amor vence qualquer medo!"
      ]
    };
  }

  // Gera histÃ³ria do dia (n!conta)
  async generateDailyStory(userPreferences = {}, useAI = false) {
    try {
      console.log(`[STORY-TELLER] Gerando histÃ³ria do dia (IA: ${useAI})`);

      if (useAI && this.config.commands.conta?.useAI) {
        return await this.generateWithAI('daily', userPreferences);
      }

      // Modo offline
      const template = this.getRandomTemplate('daily');
      let story = template;

      // Personaliza baseado nas preferÃªncias
      if (userPreferences.interests) {
        story = this.personalizeStory(story, userPreferences.interests);
      }

      // Aplica variaÃ§Ã£o emocional
      story = emotionBase.applyEmotionVariation(story, emotionBase.getIntensityByMood());

      console.log(`[STORY-TELLER] HistÃ³ria offline gerada`);
      return story;

    } catch (error) {
      console.error('[STORY-TELLER] Erro ao gerar histÃ³ria do dia:', error.message);
      return this.getRandomTemplate('daily');
    }
  }

  // Gera mini-fÃ¡bula (n!historinha)
  async generateMiniFable(animal = null, theme = null, useAI = false) {
    try {
      console.log(`[STORY-TELLER] Gerando fÃ¡bula (animal: ${animal}, tema: ${theme}, IA: ${useAI})`);

      if (useAI && this.config.commands.historinha?.useAI) {
        return await this.generateFableWithAI(animal, theme);
      }

      // Modo offline
      const beginning = "Era uma vez...";
      const middle = this.generateMiddle(animal, theme);
      const ending = this.generateEnding();

      let fable = `${beginning} ${middle} ${ending}`;

      // Aplica variaÃ§Ã£o emocional
      fable = emotionBase.applyEmotionVariation(fable, emotionBase.getIntensityByMood());

      console.log(`[STORY-TELLER] FÃ¡bula offline gerada`);
      return fable;

    } catch (error) {
      console.error('[STORY-TELLER] Erro ao gerar fÃ¡bula:', error.message);
      return "Era uma vez um animal muito especial que ensinou uma liÃ§Ã£o importante sobre amizade!";
    }
  }

  // Gera memÃ³ria personalizada (n!memoria)
  async generateMemory(contextHistory = [], useAI = false) {
    try {
      console.log(`[STORY-TELLER] Gerando memÃ³ria (IA: ${useAI})`);

      if (useAI && this.config.commands.memoria?.useAI) {
        return await this.generateMemoryWithAI(contextHistory);
      }

      // Modo offline - usa histÃ³rico se disponÃ­vel
      if (contextHistory.length > 0) {
        const recentMemory = this.extractMemoryFromHistory(contextHistory);
        if (recentMemory) {
          return emotionBase.applyEmotionVariation(recentMemory, 'medium');
        }
      }

      // Fallback - memÃ³ria inventada fofinha
      const fallbackMemories = [
        "Lembro que uma vez vocÃª me contou uma coisa muito legal...",
        "Tenho uma lembranÃ§a fofa nossa guardada no coraÃ§Ã£o...",
        "Lembro que vocÃª sempre foi muito carinhoso comigo...",
        "Tenho uma memÃ³ria especial nossa que me faz sorrir..."
      ];

      const memory = fallbackMemories[Math.floor(Math.random() * fallbackMemories.length)];
      return emotionBase.applyEmotionVariation(memory, 'medium');

    } catch (error) {
      console.error('[STORY-TELLER] Erro ao gerar memÃ³ria:', error.message);
      return "Tenho muitas lembranÃ§as especiais nossas guardadas no coraÃ§Ã£o! ðŸ’•";
    }
  }

  // Gera cenÃ¡rio de fantasia (n!fantasia)
  async generateFantasyScenario(scenarioType = null, useAI = false) {
    try {
      console.log(`[STORY-TELLER] Gerando cenÃ¡rio de fantasia (IA: ${useAI})`);

      if (useAI && this.config.commands.fantasia?.useAI) {
        return await this.generateFantasyWithAI(scenarioType);
      }

      // Modo offline
      const scenarios = this.config.commands.fantasia?.mode?.scenarios || [
        "Vamos fingir que estamos em um castelo gigante e vocÃª Ã© o rei!",
        "Eu sou uma astronauta e vocÃª tem que pilotar a nave comigo!",
        "Vamos brincar que somos super-herÃ³is salvando o mundo!",
        "Que tal fingirmos que estamos numa floresta mÃ¡gica?"
      ];

      const scenario = scenarioType ? 
        scenarios.find(s => s.toLowerCase().includes(scenarioType.toLowerCase())) || scenarios[0] :
        scenarios[Math.floor(Math.random() * scenarios.length)];

      return emotionBase.applyEmotionVariation(scenario, 'high');

    } catch (error) {
      console.error('[STORY-TELLER] Erro ao gerar fantasia:', error.message);
      return "Vamos brincar de faz de conta! Que aventura vocÃª quer viver?";
    }
  }

  // Gera com IA
  async generateWithAI(type, context = {}) {
    try {
      const prompt = this.buildAIPrompt(type, context);
      const response = await apiRotator.makeRequest(prompt, { username: 'Alice' });
      
      console.log(`[STORY-TELLER] HistÃ³ria gerada com IA`);
      return response;

    } catch (error) {
      console.error('[STORY-TELLER] Erro na IA, usando fallback:', error.message);
      return this.getRandomTemplate(type);
    }
  }

  // ConstrÃ³i prompt para IA
  buildAIPrompt(type, context) {
    const basePrompt = "VocÃª Ã© Alice, uma menina de 4 anos muito carinhosa e inteligente. ";
    
    switch (type) {
      case 'daily':
        return `${basePrompt}Conte uma histÃ³ria curta e fofa sobre algo que aconteceu no seu dia hoje. Use linguagem infantil e seja carinhosa.`;
      
      case 'fable':
        return `${basePrompt}Crie uma mini-fÃ¡bula infantil com comeÃ§o "Era uma vez...", meio e uma liÃ§Ã£o simples no final. Seja fofa e educativa.`;
      
      case 'memory':
        return `${basePrompt}Crie uma memÃ³ria fofa e carinhosa sobre uma interaÃ§Ã£o especial. Seja nostÃ¡lgica mas alegre.`;
      
      case 'fantasy':
        return `${basePrompt}Crie um cenÃ¡rio de brincadeira de faz de conta divertido e interativo. Convide para uma aventura imaginÃ¡ria.`;
      
      default:
        return `${basePrompt}Conte algo fofo e carinhoso.`;
    }
  }

  // Seleciona template aleatÃ³rio
  getRandomTemplate(type) {
    const templates = this.templates[type] || this.templates.daily;
    return templates[Math.floor(Math.random() * templates.length)];
  }

  // Personaliza histÃ³ria com interesses
  personalizeStory(story, interests) {
    if (!interests || interests.length === 0) return story;

    const interest = interests[Math.floor(Math.random() * interests.length)];
    
    // Substitui elementos genÃ©ricos por especÃ­ficos
    const replacements = {
      'passarinho': interest === 'futebol' ? 'bola' : 'passarinho',
      'brinquedo': interest === 'mÃºsica' ? 'instrumento' : 'brinquedo',
      'jardim': interest === 'natureza' ? 'floresta' : 'jardim'
    };

    let personalizedStory = story;
    Object.entries(replacements).forEach(([original, replacement]) => {
      personalizedStory = personalizedStory.replace(original, replacement);
    });

    return personalizedStory;
  }

  // Gera meio da fÃ¡bula
  generateMiddle(animal, theme) {
    const animals = animal ? [animal] : ['gato', 'cachorro', 'coelho', 'pÃ¡ssaro', 'borboleta'];
    const themes = theme ? [theme] : ['amizade', 'coragem', 'gentileza', 'sonhos'];
    
    const selectedAnimal = animals[Math.floor(Math.random() * animals.length)];
    const selectedTheme = themes[Math.floor(Math.random() * themes.length)];
    
    const middleTemplates = [
      `um ${selectedAnimal} muito especial que descobriu ${selectedTheme}`,
      `uma ${selectedAnimal} que ensinou sobre ${selectedTheme}`,
      `um ${selectedAnimal} que viveu uma aventura sobre ${selectedTheme}`
    ];
    
    return middleTemplates[Math.floor(Math.random() * middleTemplates.length)];
  }

  // Gera final da fÃ¡bula
  generateEnding() {
    const lesson = this.templates.lessons[Math.floor(Math.random() * this.templates.lessons.length)];
    return `E a liÃ§Ã£o que aprendemos foi ${lesson}`;
  }

  // Extrai memÃ³ria do histÃ³rico
  extractMemoryFromHistory(history) {
    if (history.length === 0) return null;
    
    // Busca por interaÃ§Ãµes positivas recentes
    const positiveInteractions = history.filter(msg => 
      msg.content && (
        msg.content.includes('abraÃ§o') ||
        msg.content.includes('brincar') ||
        msg.content.includes('histÃ³ria') ||
        msg.content.includes('especial')
      )
    );
    
    if (positiveInteractions.length > 0) {
      const interaction = positiveInteractions[0];
      return `Lembro quando vocÃª disse "${interaction.content.substring(0, 50)}..." - foi muito especial!`;
    }
    
    return null;
  }

  // Gera fÃ¡bula com IA
  async generateFableWithAI(animal, theme) {
    const prompt = this.buildAIPrompt('fable', { animal, theme });
    return await apiRotator.makeRequest(prompt, { username: 'Alice' });
  }

  // Gera memÃ³ria com IA
  async generateMemoryWithAI(contextHistory) {
    const prompt = this.buildAIPrompt('memory', { history: contextHistory });
    return await apiRotator.makeRequest(prompt, { username: 'Alice' });
  }

  // Gera fantasia com IA
  async generateFantasyWithAI(scenarioType) {
    const prompt = this.buildAIPrompt('fantasy', { scenario: scenarioType });
    return await apiRotator.makeRequest(prompt, { username: 'Alice' });
  }
}

export default new StoryTeller();
